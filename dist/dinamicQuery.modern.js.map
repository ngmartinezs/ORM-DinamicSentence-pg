{"version":3,"file":"dinamicQuery.modern.js","sources":["../src/dinamicQuery.js"],"sourcesContent":["const ConnectionDB = require(\"./connectionDB\");\n\nconst SQL_TABLE_CONF_QUERY = (pEsquema, pTableQuery) => {\n  return `select query_id,\n                   proposito,\n                    sql_sentence\n            from ${pEsquema}.${pTableQuery}\n    where query_id = $1`;\n};\n\nconst obtenerQueryBase = async (\n  pConnectionDB,\n  pEsquema,\n  pTableQuery,\n  pQueryId\n) => {\n  try {\n    const lQuery = {\n      name: \"fetch-query-template\",\n      text: SQL_TABLE_CONF_QUERY(pEsquema, pTableQuery),\n      values: [pQueryId],\n    };\n\n    const lResult = await pConnectionDB.query(lQuery);\n\n    return lResult.rows[0];\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst generarDataQuery = async (\n  pConnectionDB,\n  pEsquema,\n  pTableQuery,\n  pQueryId,\n  pFiltros\n) => {\n  const arrayValues = [];\n  var lConnection = pConnectionDB;\n  var connectionDB = null;\n  if (!pConnectionDB) {\n    connectionDB = new ConnectionDB();\n    lConnection = connectionDB.getConnection();\n  }\n\n  try {\n    if (pEsquema && pTableQuery && pQueryId && pFiltros) {\n      const lDefConfQuery = await obtenerQueryBase(\n        lConnection,\n        pEsquema,\n        pTableQuery,\n        pQueryId\n      );\n\n      //console.log(`lDefConfQuery => ${JSON.stringify(lDefConfQuery)}`);\n\n      if (lDefConfQuery && lDefConfQuery.sql_sentence) {\n        Object.getOwnPropertyNames(pFiltros).forEach((value, idx, array) => {\n          if (pFiltros[value]) arrayValues.push(pFiltros[value]);\n        });\n      }\n\n      if (arrayValues.length > 0) {\n        const lQueryFinal = {\n          name: `fetch-sql-${pQueryId}`,\n          text: lDefConfQuery.sql_sentence,\n          values: arrayValues,\n        };\n\n        //console.log(`lQueryFinal => ${JSON.stringify(lQueryFinal)}`);\n\n        const lResult = await lConnection.query(lQueryFinal);\n        if (lResult) {\n          return {\n            CODIGO_RETORNO: 0,\n            MENSAJE_RETORNO: \"OK\",\n            DATA: lResult.rows,\n          };\n        }\n      }\n    }\n  } catch (error) {\n    throw error;\n  } finally {\n    if (connectionDB) await connectionDB.closeConnection();\n  }\n  return {\n    CODIGO_RETORNO: 6,\n    MENSAJE_RETORNO: \"No se logro emsamblar el query\",\n    DATA: {},\n  };\n};\n\nmodule.exports = generarDataQuery;\n"],"names":["ConnectionDB","require","SQL_TABLE_CONF_QUERY","pEsquema","pTableQuery","module","exports","async","pConnectionDB","pQueryId","pFiltros","arrayValues","lConnection","connectionDB","getConnection","lDefConfQuery","lQuery","name","text","values","query","rows","error","obtenerQueryBase","sql_sentence","Object","getOwnPropertyNames","forEach","value","idx","array","push","length","lQueryFinal","lResult","CODIGO_RETORNO","MENSAJE_RETORNO","DATA","closeConnection"],"mappings":"AAAA,MAAMA,EAAeC,QAAQ,kBAEvBC,EAAuB,CAACC,EAAUC,IAC9B,uGAGSD,KAAYC,6BAwF/BC,OAAOC,QA/DkBC,MACvBC,EACAL,EACAC,EACAK,EACAC,KAEA,MAAMC,EAAc,GACpB,IAAIC,EAAcJ,EACdK,EAAe,KACdL,IAEHI,GADAC,EAAe,IAAIb,GACQc,iBAG7B,IACE,GAAIX,GAAYC,GAAeK,GAAYC,EAAU,CACnD,MAAMK,OAtCaR,OACvBC,EACAL,EACAC,EACAK,KAEA,IACE,MAAMO,EAAS,CACbC,KAAM,uBACNC,KAAMhB,EAAqBC,EAAUC,GACrCe,OAAQ,CAACV,IAKX,aAFsBD,EAAcY,MAAMJ,IAE3BK,KAAK,GACpB,MAAOC,GACP,MAAMA,IAqBwBC,CAC1BX,EACAT,EACAC,EACAK,GAWF,GANIM,GAAiBA,EAAcS,cACjCC,OAAOC,oBAAoBhB,GAAUiB,QAAQ,CAACC,EAAOC,EAAKC,KACpDpB,EAASkB,IAAQjB,EAAYoB,KAAKrB,EAASkB,MAI/CjB,EAAYqB,OAAS,EAAG,CAC1B,MAAMC,EAAc,CAClBhB,KAAO,aAAYR,EACnBS,KAAMH,EAAcS,aACpBL,OAAQR,GAKJuB,QAAgBtB,EAAYQ,MAAMa,GACxC,GAAIC,EACF,MAAO,CACLC,eAAgB,EAChBC,gBAAiB,KACjBC,KAAMH,EAAQb,QAKtB,MAAOC,GACP,MAAMA,EArCR,QAuCMT,SAAoBA,EAAayB,kBAEvC,MAAO,CACLH,eAAgB,EAChBC,gBAAiB,iCACjBC,KAAM"}