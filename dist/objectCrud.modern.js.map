{"version":3,"file":"objectCrud.modern.js","sources":["../src/objectCrud.js"],"sourcesContent":["const ConnectionDB = require(\"./connectionDB\");\n/*Private*/\nconst obtenerMetaDataTabla = async (\n  pConnection,\n  pBaseDatos,\n  pEsquema,\n  pEntidad\n) => {\n  //console.log(` ${pBaseDatos} ${pEsquema} ${pEntidad}`);\n  const META_SQL_TABLES = `select column_name nombre_columna,\n                                  column_default valor_por_defecto,\n                                  ordinal_position orden,\n                                  data_type tipo_dato,\n                                  is_nullable es_nulable,\n                                  character_maximum_length longitud_char,\n                                  numeric_precision longitud_numerica,\n                                  numeric_precision_radix numero_decimales\n                          from information_schema.columns \n                          where table_catalog= $1 \n                          and table_schema = $2 \n                          and table_name = $3;`;\n\n  const query = {\n    name: \"fetch-sql-meta-tables\",\n    text: META_SQL_TABLES,\n    values: [pBaseDatos, pEsquema, pEntidad],\n  };\n\n  try {\n    const lRetorno = await pConnection.query(query);\n    return lRetorno.rows;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/*Private*/\nconst generarSQLConsulta = (pMetaDataArray, pEsquema, pEntidad, pFiltro) => {\n  var lSQL = `SELECT `;\n  var lContador = 0;\n  var lFiltro = ``;\n  var lArrayValues = [];\n  var lIndiceFiltro = 1;\n\n  if (pMetaDataArray && pFiltro) {\n    /**\n     * Se genera SQL general de la consulta.\n     **/\n    pMetaDataArray.forEach((element) => {\n      if (lContador == 0) lSQL = `${lSQL} ${element.nombre_columna} `;\n      else lSQL = ` ${lSQL} , ${element.nombre_columna}`;\n\n      lContador++;\n    });\n\n    lSQL = lSQL + \" FROM \" + pEsquema + \".\" + pEntidad;\n\n    /**\n     * Se genera los filtros.\n     **/\n    Object.getOwnPropertyNames(pFiltro).forEach((value, idx, array) => {\n      if (pFiltro[value]) {\n        if (lFiltro.length === 0) {\n          lFiltro = ` ${lFiltro} WHERE ${value} = $${lIndiceFiltro} `;\n          lArrayValues.push(pFiltro[value]);\n        } else {\n          lFiltro = ` ${lFiltro} AND ${value} = $${lIndiceFiltro} `;\n          lArrayValues.push(pFiltro[value]);\n        }\n\n        lIndiceFiltro++;\n      }\n    });\n\n    if (lFiltro.length !== 0 && lArrayValues.length > 0)\n      return {\n        name: \"fetch-sql-consulta-tables\",\n        text: `${lSQL} ${lFiltro}`,\n        values: lArrayValues,\n      };\n  }\n};\n\nconst generarSQLInsert = (pMetaDataArray, pEsquema, pEntidad, pDatos) => {\n  var SQL_INSERT = `INSERT INTO ${pEsquema}.${pEntidad} (`;\n  var SQL_VALUES = ` VALUES (`;\n  var lId = \"\";\n  var lArrayValues = [];\n  var lContador = 1;\n  var lDato = \"\";\n  var lRamdonTranId = Math.floor(Math.random() * 1001);\n\n  if (pMetaDataArray && pDatos) {\n    pMetaDataArray.forEach((element) => {\n      if (element.valor_por_defecto) {\n        if (\n          element.valor_por_defecto.toLowerCase().includes(\"nextval\") ||\n          element.valor_por_defecto.toLowerCase().includes(\"seq\")\n        ) {\n          lId = element.nombre_columna;\n        } else {\n          if (pDatos[element.nombre_columna]) {\n            SQL_INSERT =\n              lContador === 1\n                ? ` ${SQL_INSERT} ${element.nombre_columna} `\n                : ` ${SQL_INSERT} , ${element.nombre_columna} `;\n\n            SQL_VALUES =\n              lContador === 1\n                ? ` ${SQL_VALUES} $${lContador} `\n                : ` ${SQL_VALUES} , $${lContador} `;\n\n            lArrayValues.push(element.valor_por_defecto);\n\n            lContador++;\n          }\n        }\n      } else {\n        //console.log(`.........pDatos =>${JSON.stringify(pDatos)}`);\n\n        if (\n          !pDatos[element.nombre_columna.toLowerCase()] &&\n          (element.tipo_dato.toLowerCase().includes(\"timestamp\") ||\n            element.tipo_dato.toLowerCase().includes(\"date\"))\n        ) {\n          SQL_INSERT =\n            lContador === 1\n              ? ` ${SQL_INSERT} ${element.nombre_columna} `\n              : ` ${SQL_INSERT} , ${element.nombre_columna} `;\n\n          SQL_VALUES =\n            lContador === 1\n              ? ` ${SQL_VALUES} now() `\n              : ` ${SQL_VALUES} , now() `;\n        } else {\n          if (pDatos[element.nombre_columna.toLowerCase()]) {\n            SQL_INSERT =\n              lContador === 1\n                ? ` ${SQL_INSERT} ${element.nombre_columna} `\n                : ` ${SQL_INSERT} , ${element.nombre_columna} `;\n\n            SQL_VALUES =\n              lContador === 1\n                ? ` ${SQL_VALUES} $${lContador} `\n                : ` ${SQL_VALUES} , $${lContador} `;\n\n            lArrayValues.push(pDatos[element.nombre_columna.toLowerCase()]);\n            lContador++;\n          }\n        }\n      }\n    });\n\n    return {\n      name: `fetch-insert-${lRamdonTranId}`,\n      text:\n        `${SQL_INSERT} ) ${SQL_VALUES} )` + (lId ? `RETURNING ${lId};` : `;`),\n      values: lArrayValues,\n    };\n  }\n\n  return {};\n};\n\nconst generarSQLUpdate = (pMetaDataArray, pEsquema, pEntidad, pDatosUpdate) => {\n  var SQL_UPDATE = `UPDATE ${pEsquema}.${pEntidad} SET `;\n  var SQL_FIELDS = ``;\n  var SQL_WHERE = ``;\n  var lArrayValues = [];\n  var lContador = 1;\n  var lDato = \"\";\n  var lRamdonTranId = Math.floor(Math.random() * 1001);\n\n  if (pMetaDataArray && pDatosUpdate) {\n    /*Se establecen los valores a actualizar*/\n    if (pDatosUpdate.datosActulizar && pDatosUpdate.filtros) {\n      pMetaDataArray.forEach((element) => {\n        if (\n          pDatosUpdate.datosActulizar[element.nombre_columna.toLowerCase()] &&\n          (!element.valor_por_defecto ||\n            (element.valor_por_defecto &&\n              !element.valor_por_defecto.toLowerCase().includes(\"seq\")))\n        ) {\n          let lSentencia = `${element.nombre_columna} = $${lContador}`;\n          SQL_FIELDS = !SQL_FIELDS\n            ? ` ${lSentencia} `\n            : ` ${SQL_FIELDS} , ${lSentencia} `;\n\n          lArrayValues.push(\n            pDatosUpdate.datosActulizar[element.nombre_columna.toLowerCase()]\n          );\n          lContador++;\n        }\n      });\n      Object.getOwnPropertyNames(pDatosUpdate.filtros).forEach(\n        (val, index, array) => {\n          let lSentenciaWhere = ` ${val} = $${lContador} `;\n          SQL_WHERE = !SQL_WHERE\n            ? ` WHERE ${lSentenciaWhere} `\n            : ` AND ${val} = $${lContador} `;\n          lArrayValues.push(pDatosUpdate.filtros[val]);\n          lContador++;\n        }\n      );\n\n      /*console.log(\n        `.........SQL_UPDATE =>${SQL_UPDATE} ${SQL_FIELDS} ${SQL_WHERE}`\n      );*/\n      return {\n        name: `fetch-sql-update-${lRamdonTranId}`,\n        text: `${SQL_UPDATE} ${SQL_FIELDS} ${SQL_WHERE};`,\n        values: lArrayValues,\n      };\n    }\n  }\n\n  return {};\n};\n\nconst generarSQLDelete = (pMetaDataArray, pEsquema, pEntidad, pFiltros) => {\n  var SQL_DELETE = `DELETE FROM ${pEsquema}.${pEntidad} `;\n  var SQL_WHERE = ``;\n  var lArrayValues = [];\n  var lContador = 1;\n  var lDato = \"\";\n  var lRamdonTranId = Math.floor(Math.random() * 1001);\n\n  if (pMetaDataArray && pFiltros) {\n    /*Se establecen los valores a actualizar*/\n\n    Object.getOwnPropertyNames(pFiltros).forEach((value, index, array) => {\n      var metadato = pMetaDataArray.find((element) => {\n        return element.nombre_columna.toLowerCase() === value.toLowerCase();\n      });\n\n      if (metadato) {\n        let lSentenciaWhere = ` ${value} = $${lContador} `;\n        SQL_WHERE = !SQL_WHERE\n          ? ` WHERE ${lSentenciaWhere} `\n          : ` AND ${value} = $${lContador} `;\n        lArrayValues.push(pFiltros[value]);\n        lContador++;\n      }\n    });\n\n    return {\n      name: `fetch-sql-delete-${lRamdonTranId}`,\n      text: `${SQL_DELETE} ${SQL_WHERE};`,\n      values: lArrayValues,\n    };\n  }\n\n  return {};\n};\n\nclass ObjectsCrud {\n  constructor() {}\n\n  async consultar(pConnectionDB, pBaseDatos, pEsquema, pEntidad, pFiltro) {\n    var connectionDB = null;\n    var lConnection = pConnectionDB;\n\n    if (!pConnectionDB) {\n      connectionDB = new ConnectionDB();\n      lConnection = connectionDB.getConnection();\n    }\n\n    try {\n      const lMetaDataTabla = await obtenerMetaDataTabla(\n        lConnection,\n        pBaseDatos,\n        pEsquema,\n        pEntidad\n      );\n\n      const lSQLConsulta = generarSQLConsulta(\n        lMetaDataTabla,\n        pEsquema,\n        pEntidad,\n        pFiltro\n      );\n\n      if (lSQLConsulta) {\n        const lResultado = await lConnection.query(lSQLConsulta);\n\n        if (lResultado)\n          return {\n            CODIGO_RETORNO: 0,\n            MENSAJE_RETORNO: \"OK\",\n            DATA: lResultado.rows,\n          };\n        else\n          return {\n            CODIGO_RETORNO: 1,\n            MENSAJE_RETORNO: \"No se encontro data\",\n            DATA: [],\n          };\n      } else\n        return {\n          CODIGO_RETORNO: 2,\n          MENSAJE_RETORNO: \"No se establecieron filtros de consulta correctos\",\n          DATA: [],\n        };\n    } catch (error) {\n      throw error;\n    } finally {\n      if (pConnectionDB) await pConnectionDB.closeConnection();\n    }\n  }\n\n  async insertar(pConnectionDB, pBaseDatos, pEsquema, pEntidad, pDatos) {\n    var lConnection = pConnectionDB;\n    var connectionDB = null;\n    if (!pConnectionDB) {\n      connectionDB = new ConnectionDB();\n      lConnection = connectionDB.getConnection();\n    }\n\n    try {\n      /*console.log(\n        `insertar(${pConnectionDB}, ${pBaseDatos}, ${pEsquema}, ${pEntidad}, ${pDatos})`\n      );*/\n      const lMetaDataTabla = await obtenerMetaDataTabla(\n        lConnection,\n        pBaseDatos.toLowerCase(),\n        pEsquema.toLowerCase(),\n        pEntidad.toLowerCase()\n      );\n\n      //console.log(`lMetaDataTabla => ${JSON.stringify(lMetaDataTabla)}`);\n\n      if (lMetaDataTabla) {\n        const lSqlInsert = generarSQLInsert(\n          lMetaDataTabla,\n          pEsquema,\n          pEntidad,\n          pDatos\n        );\n\n        //console.log(`lSqlInsert => ${JSON.stringify(lSqlInsert)}`);\n\n        if (lSqlInsert) {\n          const lResultado = await lConnection.query(lSqlInsert);\n\n          //console.log(`lResultado => ${JSON.stringify(lResultado)}`);\n\n          if (lResultado)\n            return {\n              CODIGO_RETORNO: 0,\n              MENSAJE_RETORNO: \"OK\",\n              DATA: lResultado.rows,\n            };\n        }\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      if (connectionDB) await connectionDB.closeConnection();\n    }\n\n    return {\n      CODIGO_RETORNO: 3,\n      MENSAJE_RETORNO: \"No se insertaron datos\",\n      DATA: {},\n    };\n  }\n\n  async update(pConnectionDB, pBaseDatos, pEsquema, pEntidad, pDatos) {\n    var lConnection = pConnectionDB;\n    var connectionDB = null;\n    if (!pConnectionDB) {\n      connectionDB = new ConnectionDB();\n      lConnection = connectionDB.getConnection();\n    }\n\n    try {\n      const lMetaDataTabla = await obtenerMetaDataTabla(\n        lConnection,\n        pBaseDatos.toLowerCase(),\n        pEsquema.toLowerCase(),\n        pEntidad.toLowerCase()\n      );\n\n      //console.log(`lMetaDataTabla => ${JSON.stringify(lMetaDataTabla)}`);\n\n      if (lMetaDataTabla) {\n        const lSqlUpdate = generarSQLUpdate(\n          lMetaDataTabla,\n          pEsquema,\n          pEntidad,\n          pDatos\n        );\n\n        if (lSqlUpdate) {\n          //console.log(`lSqlUpdate => ${JSON.stringify(lSqlUpdate)}`);\n          const lResultado = await lConnection.query(lSqlUpdate);\n\n          //console.log(`lResultado => ${JSON.stringify(lResultado)}`);\n\n          if (lResultado)\n            return {\n              CODIGO_RETORNO: 0,\n              MENSAJE_RETORNO: \"OK\",\n              DATA: lResultado.rowCount,\n            };\n        }\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      if (connectionDB) await connectionDB.closeConnection();\n    }\n\n    return {\n      CODIGO_RETORNO: 4,\n      MENSAJE_RETORNO: \"No se realizaron actualizaciones\",\n      DATA: {},\n    };\n  }\n\n  async delete(pConnectionDB, pBaseDatos, pEsquema, pEntidad, pFiltros) {\n    var lConnection = pConnectionDB;\n    var connectionDB = null;\n    if (!pConnectionDB) {\n      connectionDB = new ConnectionDB();\n      lConnection = connectionDB.getConnection();\n    }\n\n    try {\n      const lMetaDataTabla = await obtenerMetaDataTabla(\n        lConnection,\n        pBaseDatos.toLowerCase(),\n        pEsquema.toLowerCase(),\n        pEntidad.toLowerCase()\n      );\n\n      //console.log(`lMetaDataTabla => ${JSON.stringify(lMetaDataTabla)}`);\n\n      if (lMetaDataTabla) {\n        const lSqlDelete = generarSQLDelete(\n          lMetaDataTabla,\n          pEsquema,\n          pEntidad,\n          pFiltros\n        );\n\n        if (lSqlDelete.values.length > 0) {\n          // console.log(`lSqlDelete => ${JSON.stringify(lSqlDelete)}`);\n          const lResultado = await lConnection.query(lSqlDelete);\n\n          //console.log(`lResultado => ${JSON.stringify(lResultado)}`);\n\n          if (lResultado && lResultado)\n            return {\n              CODIGO_RETORNO: 0,\n              MENSAJE_RETORNO: \"OK\",\n              DATA: lResultado.rowCount,\n            };\n        }\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      if (connectionDB) await connectionDB.closeConnection();\n    }\n\n    return {\n      CODIGO_RETORNO: 5,\n      MENSAJE_RETORNO: \"No se eliminaron registros\",\n      DATA: {},\n    };\n  }\n}\n\nmodule.exports = ObjectsCrud;\n"],"names":["ConnectionDB","require","obtenerMetaDataTabla","async","pConnection","pBaseDatos","pEsquema","pEntidad","query","name","text","values","rows","error","module","exports","constructor","[object Object]","pConnectionDB","pFiltro","lConnection","getConnection","lSQLConsulta","pMetaDataArray","lSQL","lContador","lFiltro","lArrayValues","lIndiceFiltro","forEach","element","nombre_columna","Object","getOwnPropertyNames","value","idx","array","length","push","generarSQLConsulta","lResultado","CODIGO_RETORNO","MENSAJE_RETORNO","DATA","closeConnection","pDatos","connectionDB","lMetaDataTabla","toLowerCase","lSqlInsert","SQL_INSERT","SQL_VALUES","lId","lRamdonTranId","Math","floor","random","valor_por_defecto","includes","tipo_dato","generarSQLInsert","lSqlUpdate","pDatosUpdate","SQL_UPDATE","SQL_FIELDS","SQL_WHERE","datosActulizar","filtros","lSentencia","val","index","generarSQLUpdate","rowCount","pFiltros","lSqlDelete","SQL_DELETE","find","lSentenciaWhere","generarSQLDelete"],"mappings":"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"}