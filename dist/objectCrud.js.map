{"version":3,"file":"objectCrud.js","sources":["../src/objectCrud.js"],"sourcesContent":["const ConnectionDB = require(\"./connectionDB\");\n/*Private*/\nconst obtenerMetaDataTabla = async (\n  pConnection,\n  pBaseDatos,\n  pEsquema,\n  pEntidad\n) => {\n  //console.log(` ${pBaseDatos} ${pEsquema} ${pEntidad}`);\n  const META_SQL_TABLES = `select column_name nombre_columna,\n                                  column_default valor_por_defecto,\n                                  ordinal_position orden,\n                                  data_type tipo_dato,\n                                  is_nullable es_nulable,\n                                  character_maximum_length longitud_char,\n                                  numeric_precision longitud_numerica,\n                                  numeric_precision_radix numero_decimales\n                          from information_schema.columns \n                          where table_catalog= $1 \n                          and table_schema = $2 \n                          and table_name = $3;`;\n\n  const query = {\n    name: \"fetch-sql-meta-tables\",\n    text: META_SQL_TABLES,\n    values: [pBaseDatos, pEsquema, pEntidad],\n  };\n\n  try {\n    const lRetorno = await pConnection.query(query);\n    return lRetorno.rows;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/*Private*/\nconst generarSQLConsulta = (pMetaDataArray, pEsquema, pEntidad, pFiltro) => {\n  var lSQL = `SELECT `;\n  var lContador = 0;\n  var lFiltro = ``;\n  var lArrayValues = [];\n  var lIndiceFiltro = 1;\n\n  if (pMetaDataArray && pFiltro) {\n    /**\n     * Se genera SQL general de la consulta.\n     **/\n    pMetaDataArray.forEach((element) => {\n      if (lContador == 0) lSQL = `${lSQL} ${element.nombre_columna} `;\n      else lSQL = ` ${lSQL} , ${element.nombre_columna}`;\n\n      lContador++;\n    });\n\n    lSQL = lSQL + \" FROM \" + pEsquema + \".\" + pEntidad;\n\n    /**\n     * Se genera los filtros.\n     **/\n    Object.getOwnPropertyNames(pFiltro).forEach((value, idx, array) => {\n      if (pFiltro[value]) {\n        if (lFiltro.length === 0) {\n          lFiltro = ` ${lFiltro} WHERE ${value} = $${lIndiceFiltro} `;\n          lArrayValues.push(pFiltro[value]);\n        } else {\n          lFiltro = ` ${lFiltro} AND ${value} = $${lIndiceFiltro} `;\n          lArrayValues.push(pFiltro[value]);\n        }\n\n        lIndiceFiltro++;\n      }\n    });\n\n    if (lFiltro.length !== 0 && lArrayValues.length > 0)\n      return {\n        name: \"fetch-sql-consulta-tables\",\n        text: `${lSQL} ${lFiltro}`,\n        values: lArrayValues,\n      };\n  }\n};\n\nconst generarSQLInsert = (pMetaDataArray, pEsquema, pEntidad, pDatos) => {\n  var SQL_INSERT = `INSERT INTO ${pEsquema}.${pEntidad} (`;\n  var SQL_VALUES = ` VALUES (`;\n  var lId = \"\";\n  var lArrayValues = [];\n  var lContador = 1;\n  var lDato = \"\";\n  var lRamdonTranId = Math.floor(Math.random() * 1001);\n\n  if (pMetaDataArray && pDatos) {\n    pMetaDataArray.forEach((element) => {\n      if (element.valor_por_defecto) {\n        if (\n          element.valor_por_defecto.toLowerCase().includes(\"nextval\") ||\n          element.valor_por_defecto.toLowerCase().includes(\"seq\")\n        ) {\n          lId = element.nombre_columna;\n        } else {\n          if (pDatos[element.nombre_columna]) {\n            SQL_INSERT =\n              lContador === 1\n                ? ` ${SQL_INSERT} ${element.nombre_columna} `\n                : ` ${SQL_INSERT} , ${element.nombre_columna} `;\n\n            SQL_VALUES =\n              lContador === 1\n                ? ` ${SQL_VALUES} $${lContador} `\n                : ` ${SQL_VALUES} , $${lContador} `;\n\n            lArrayValues.push(element.valor_por_defecto);\n\n            lContador++;\n          }\n        }\n      } else {\n        //console.log(`.........pDatos =>${JSON.stringify(pDatos)}`);\n\n        if (\n          !pDatos[element.nombre_columna.toLowerCase()] &&\n          (element.tipo_dato.toLowerCase().includes(\"timestamp\") ||\n            element.tipo_dato.toLowerCase().includes(\"date\"))\n        ) {\n          SQL_INSERT =\n            lContador === 1\n              ? ` ${SQL_INSERT} ${element.nombre_columna} `\n              : ` ${SQL_INSERT} , ${element.nombre_columna} `;\n\n          SQL_VALUES =\n            lContador === 1\n              ? ` ${SQL_VALUES} now() `\n              : ` ${SQL_VALUES} , now() `;\n        } else {\n          if (pDatos[element.nombre_columna.toLowerCase()]) {\n            SQL_INSERT =\n              lContador === 1\n                ? ` ${SQL_INSERT} ${element.nombre_columna} `\n                : ` ${SQL_INSERT} , ${element.nombre_columna} `;\n\n            SQL_VALUES =\n              lContador === 1\n                ? ` ${SQL_VALUES} $${lContador} `\n                : ` ${SQL_VALUES} , $${lContador} `;\n\n            lArrayValues.push(pDatos[element.nombre_columna.toLowerCase()]);\n            lContador++;\n          }\n        }\n      }\n    });\n\n    return {\n      name: `fetch-insert-${lRamdonTranId}`,\n      text:\n        `${SQL_INSERT} ) ${SQL_VALUES} )` + (lId ? `RETURNING ${lId};` : `;`),\n      values: lArrayValues,\n    };\n  }\n\n  return {};\n};\n\nconst generarSQLUpdate = (pMetaDataArray, pEsquema, pEntidad, pDatosUpdate) => {\n  var SQL_UPDATE = `UPDATE ${pEsquema}.${pEntidad} SET `;\n  var SQL_FIELDS = ``;\n  var SQL_WHERE = ``;\n  var lArrayValues = [];\n  var lContador = 1;\n  var lDato = \"\";\n  var lRamdonTranId = Math.floor(Math.random() * 1001);\n\n  if (pMetaDataArray && pDatosUpdate) {\n    /*Se establecen los valores a actualizar*/\n    if (pDatosUpdate.datosActulizar && pDatosUpdate.filtros) {\n      pMetaDataArray.forEach((element) => {\n        if (\n          pDatosUpdate.datosActulizar[element.nombre_columna.toLowerCase()] &&\n          (!element.valor_por_defecto ||\n            (element.valor_por_defecto &&\n              !element.valor_por_defecto.toLowerCase().includes(\"seq\")))\n        ) {\n          let lSentencia = `${element.nombre_columna} = $${lContador}`;\n          SQL_FIELDS = !SQL_FIELDS\n            ? ` ${lSentencia} `\n            : ` ${SQL_FIELDS} , ${lSentencia} `;\n\n          lArrayValues.push(\n            pDatosUpdate.datosActulizar[element.nombre_columna.toLowerCase()]\n          );\n          lContador++;\n        }\n      });\n      Object.getOwnPropertyNames(pDatosUpdate.filtros).forEach(\n        (val, index, array) => {\n          let lSentenciaWhere = ` ${val} = $${lContador} `;\n          SQL_WHERE = !SQL_WHERE\n            ? ` WHERE ${lSentenciaWhere} `\n            : ` AND ${val} = $${lContador} `;\n          lArrayValues.push(pDatosUpdate.filtros[val]);\n          lContador++;\n        }\n      );\n\n      /*console.log(\n        `.........SQL_UPDATE =>${SQL_UPDATE} ${SQL_FIELDS} ${SQL_WHERE}`\n      );*/\n      return {\n        name: `fetch-sql-update-${lRamdonTranId}`,\n        text: `${SQL_UPDATE} ${SQL_FIELDS} ${SQL_WHERE};`,\n        values: lArrayValues,\n      };\n    }\n  }\n\n  return {};\n};\n\nconst generarSQLDelete = (pMetaDataArray, pEsquema, pEntidad, pFiltros) => {\n  var SQL_DELETE = `DELETE FROM ${pEsquema}.${pEntidad} `;\n  var SQL_WHERE = ``;\n  var lArrayValues = [];\n  var lContador = 1;\n  var lDato = \"\";\n  var lRamdonTranId = Math.floor(Math.random() * 1001);\n\n  if (pMetaDataArray && pFiltros) {\n    /*Se establecen los valores a actualizar*/\n\n    Object.getOwnPropertyNames(pFiltros).forEach((value, index, array) => {\n      var metadato = pMetaDataArray.find((element) => {\n        return element.nombre_columna.toLowerCase() === value.toLowerCase();\n      });\n\n      if (metadato) {\n        let lSentenciaWhere = ` ${value} = $${lContador} `;\n        SQL_WHERE = !SQL_WHERE\n          ? ` WHERE ${lSentenciaWhere} `\n          : ` AND ${value} = $${lContador} `;\n        lArrayValues.push(pFiltros[value]);\n        lContador++;\n      }\n    });\n\n    return {\n      name: `fetch-sql-delete-${lRamdonTranId}`,\n      text: `${SQL_DELETE} ${SQL_WHERE};`,\n      values: lArrayValues,\n    };\n  }\n\n  return {};\n};\n\nclass ObjectsCrud {\n  constructor() {}\n\n  async consultar(pConnectionDB, pBaseDatos, pEsquema, pEntidad, pFiltro) {\n    var connectionDB = null;\n    var lConnection = pConnectionDB;\n\n    if (!pConnectionDB) {\n      connectionDB = new ConnectionDB();\n      lConnection = connectionDB.getConnection();\n    }\n\n    try {\n      const lMetaDataTabla = await obtenerMetaDataTabla(\n        lConnection,\n        pBaseDatos,\n        pEsquema,\n        pEntidad\n      );\n\n      const lSQLConsulta = generarSQLConsulta(\n        lMetaDataTabla,\n        pEsquema,\n        pEntidad,\n        pFiltro\n      );\n\n      if (lSQLConsulta) {\n        const lResultado = await lConnection.query(lSQLConsulta);\n\n        if (lResultado)\n          return {\n            CODIGO_RETORNO: 0,\n            MENSAJE_RETORNO: \"OK\",\n            DATA: lResultado.rows,\n          };\n        else\n          return {\n            CODIGO_RETORNO: 1,\n            MENSAJE_RETORNO: \"No se encontro data\",\n            DATA: [],\n          };\n      } else\n        return {\n          CODIGO_RETORNO: 2,\n          MENSAJE_RETORNO: \"No se establecieron filtros de consulta correctos\",\n          DATA: [],\n        };\n    } catch (error) {\n      throw error;\n    } finally {\n      if (pConnectionDB) await pConnectionDB.closeConnection();\n    }\n  }\n\n  async insertar(pConnectionDB, pBaseDatos, pEsquema, pEntidad, pDatos) {\n    var lConnection = pConnectionDB;\n    var connectionDB = null;\n    if (!pConnectionDB) {\n      connectionDB = new ConnectionDB();\n      lConnection = connectionDB.getConnection();\n    }\n\n    try {\n      /*console.log(\n        `insertar(${pConnectionDB}, ${pBaseDatos}, ${pEsquema}, ${pEntidad}, ${pDatos})`\n      );*/\n      const lMetaDataTabla = await obtenerMetaDataTabla(\n        lConnection,\n        pBaseDatos.toLowerCase(),\n        pEsquema.toLowerCase(),\n        pEntidad.toLowerCase()\n      );\n\n      //console.log(`lMetaDataTabla => ${JSON.stringify(lMetaDataTabla)}`);\n\n      if (lMetaDataTabla) {\n        const lSqlInsert = generarSQLInsert(\n          lMetaDataTabla,\n          pEsquema,\n          pEntidad,\n          pDatos\n        );\n\n        //console.log(`lSqlInsert => ${JSON.stringify(lSqlInsert)}`);\n\n        if (lSqlInsert) {\n          const lResultado = await lConnection.query(lSqlInsert);\n\n          //console.log(`lResultado => ${JSON.stringify(lResultado)}`);\n\n          if (lResultado)\n            return {\n              CODIGO_RETORNO: 0,\n              MENSAJE_RETORNO: \"OK\",\n              DATA: lResultado.rows,\n            };\n        }\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      if (connectionDB) await connectionDB.closeConnection();\n    }\n\n    return {\n      CODIGO_RETORNO: 3,\n      MENSAJE_RETORNO: \"No se insertaron datos\",\n      DATA: {},\n    };\n  }\n\n  async update(pConnectionDB, pBaseDatos, pEsquema, pEntidad, pDatos) {\n    var lConnection = pConnectionDB;\n    var connectionDB = null;\n    if (!pConnectionDB) {\n      connectionDB = new ConnectionDB();\n      lConnection = connectionDB.getConnection();\n    }\n\n    try {\n      const lMetaDataTabla = await obtenerMetaDataTabla(\n        lConnection,\n        pBaseDatos.toLowerCase(),\n        pEsquema.toLowerCase(),\n        pEntidad.toLowerCase()\n      );\n\n      //console.log(`lMetaDataTabla => ${JSON.stringify(lMetaDataTabla)}`);\n\n      if (lMetaDataTabla) {\n        const lSqlUpdate = generarSQLUpdate(\n          lMetaDataTabla,\n          pEsquema,\n          pEntidad,\n          pDatos\n        );\n\n        if (lSqlUpdate) {\n          //console.log(`lSqlUpdate => ${JSON.stringify(lSqlUpdate)}`);\n          const lResultado = await lConnection.query(lSqlUpdate);\n\n          //console.log(`lResultado => ${JSON.stringify(lResultado)}`);\n\n          if (lResultado)\n            return {\n              CODIGO_RETORNO: 0,\n              MENSAJE_RETORNO: \"OK\",\n              DATA: lResultado.rowCount,\n            };\n        }\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      if (connectionDB) await connectionDB.closeConnection();\n    }\n\n    return {\n      CODIGO_RETORNO: 4,\n      MENSAJE_RETORNO: \"No se realizaron actualizaciones\",\n      DATA: {},\n    };\n  }\n\n  async delete(pConnectionDB, pBaseDatos, pEsquema, pEntidad, pFiltros) {\n    var lConnection = pConnectionDB;\n    var connectionDB = null;\n    if (!pConnectionDB) {\n      connectionDB = new ConnectionDB();\n      lConnection = connectionDB.getConnection();\n    }\n\n    try {\n      const lMetaDataTabla = await obtenerMetaDataTabla(\n        lConnection,\n        pBaseDatos.toLowerCase(),\n        pEsquema.toLowerCase(),\n        pEntidad.toLowerCase()\n      );\n\n      //console.log(`lMetaDataTabla => ${JSON.stringify(lMetaDataTabla)}`);\n\n      if (lMetaDataTabla) {\n        const lSqlDelete = generarSQLDelete(\n          lMetaDataTabla,\n          pEsquema,\n          pEntidad,\n          pFiltros\n        );\n\n        if (lSqlDelete.values.length > 0) {\n          // console.log(`lSqlDelete => ${JSON.stringify(lSqlDelete)}`);\n          const lResultado = await lConnection.query(lSqlDelete);\n\n          //console.log(`lResultado => ${JSON.stringify(lResultado)}`);\n\n          if (lResultado && lResultado)\n            return {\n              CODIGO_RETORNO: 0,\n              MENSAJE_RETORNO: \"OK\",\n              DATA: lResultado.rowCount,\n            };\n        }\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      if (connectionDB) await connectionDB.closeConnection();\n    }\n\n    return {\n      CODIGO_RETORNO: 5,\n      MENSAJE_RETORNO: \"No se eliminaron registros\",\n      DATA: {},\n    };\n  }\n}\n\nmodule.exports = ObjectsCrud;\n"],"names":["body","recover","result","e","then","ConnectionDB","require","_finallyRethrows","finalizer","bind","obtenerMetaDataTabla","pConnection","pBaseDatos","pEsquema","pEntidad","query","name","text","values","lRetorno","rows","error","module","exports","consultar","pConnectionDB","pFiltro","connectionDB","lConnection","getConnection","lMetaDataTabla","lSQLConsulta","pMetaDataArray","lSQL","lContador","lFiltro","lArrayValues","lIndiceFiltro","forEach","element","nombre_columna","Object","getOwnPropertyNames","value","idx","array","length","push","generarSQLConsulta","lResultado","CODIGO_RETORNO","MENSAJE_RETORNO","DATA","closeConnection","insertar","pDatos","toLowerCase","lSqlInsert","SQL_INSERT","SQL_VALUES","lId","lRamdonTranId","Math","floor","random","valor_por_defecto","includes","tipo_dato","generarSQLInsert","update","lSqlUpdate","pDatosUpdate","SQL_UPDATE","SQL_FIELDS","SQL_WHERE","datosActulizar","filtros","lSentencia","val","index","generarSQLUpdate","rowCount","pFiltros","lSqlDelete","SQL_DELETE","find","generarSQLDelete"],"mappings":"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"}