{"version":3,"file":"dinamicQuery.mjs","sources":["../src/dinamicQuery.js"],"sourcesContent":["const ConnectionDB = require(\"./connectionDB\");\n\nconst SQL_TABLE_CONF_QUERY = (pEsquema, pTableQuery) => {\n  return `select query_id,\n                   proposito,\n                    sql_sentence\n            from ${pEsquema}.${pTableQuery}\n    where query_id = $1`;\n};\n\nconst obtenerQueryBase = async (\n  pConnectionDB,\n  pEsquema,\n  pTableQuery,\n  pQueryId\n) => {\n  try {\n    const lQuery = {\n      name: \"fetch-query-template\",\n      text: SQL_TABLE_CONF_QUERY(pEsquema, pTableQuery),\n      values: [pQueryId],\n    };\n\n    const lResult = await pConnectionDB.query(lQuery);\n\n    return lResult.rows[0];\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst generarDataQuery = async (\n  pConnectionDB,\n  pEsquema,\n  pTableQuery,\n  pQueryId,\n  pFiltros\n) => {\n  const arrayValues = [];\n  var lConnection = pConnectionDB;\n  var connectionDB = null;\n  if (!pConnectionDB) {\n    connectionDB = new ConnectionDB();\n    lConnection = connectionDB.getConnection();\n  }\n\n  try {\n    if (pEsquema && pTableQuery && pQueryId && pFiltros) {\n      const lDefConfQuery = await obtenerQueryBase(\n        lConnection,\n        pEsquema,\n        pTableQuery,\n        pQueryId\n      );\n\n      //console.log(`lDefConfQuery => ${JSON.stringify(lDefConfQuery)}`);\n\n      if (lDefConfQuery && lDefConfQuery.sql_sentence) {\n        Object.getOwnPropertyNames(pFiltros).forEach((value, idx, array) => {\n          if (pFiltros[value]) arrayValues.push(pFiltros[value]);\n        });\n      }\n\n      if (arrayValues.length > 0) {\n        const lQueryFinal = {\n          name: `fetch-sql-${pQueryId}`,\n          text: lDefConfQuery.sql_sentence,\n          values: arrayValues,\n        };\n\n        //console.log(`lQueryFinal => ${JSON.stringify(lQueryFinal)}`);\n\n        const lResult = await lConnection.query(lQueryFinal);\n        if (lResult) {\n          return {\n            CODIGO_RETORNO: 0,\n            MENSAJE_RETORNO: \"OK\",\n            DATA: lResult.rows,\n          };\n        }\n      }\n    }\n  } catch (error) {\n    throw error;\n  } finally {\n    if (connectionDB) await connectionDB.closeConnection();\n  }\n  return {\n    CODIGO_RETORNO: 6,\n    MENSAJE_RETORNO: \"No se logro emsamblar el query\",\n    DATA: {},\n  };\n};\n\nmodule.exports = generarDataQuery;\n"],"names":["body","recover","result","e","then","ConnectionDB","require","SQL_TABLE_CONF_QUERY","pEsquema","pTableQuery","module","exports","pConnectionDB","pQueryId","pFiltros","CODIGO_RETORNO","MENSAJE_RETORNO","DATA","arrayValues","lConnection","connectionDB","getConnection","finalizer","lQuery","name","text","values","query","lResult","rows","error","obtenerQueryBase","lDefConfQuery","sql_sentence","Object","getOwnPropertyNames","forEach","value","idx","array","push","length","bind","closeConnection"],"mappings":"AAkjBO,WAAgBA,EAAMC,GAC5B,IACC,IAAIC,EAASF,IACZ,MAAMG,GACP,OAAOF,EAAQE,GAEhB,OAAID,GAAUA,EAAOE,KACbF,EAAOE,UAAK,EAAQH,GAErBC,EA3jBR,IAAMG,EAAeC,QAAQ,kBAEvBC,EAAuB,SAACC,EAAUC,GACtC,6GAGiBD,MAAYC,+BAwF/BC,OAAOC,iBA9DLC,EACAJ,EACAC,EACAI,EACAC,sCAmDO,CACLC,eAAgB,EAChBC,gBAAiB,iCACjBC,KAAM,KApDFC,EAAc,GAChBC,EAAcP,EACdQ,EAAe,KACdR,IACHQ,EAAe,IAAIf,EACnBc,EAAcC,EAAaC,iBAN1B,MA0hBE,SAA0BrB,EAAMsB,GACtC,IACC,IAAIpB,kBAlhBEM,GAAYC,GAAeI,GAAYC,kCApC7CF,EACAJ,EACAC,EACAI,2CAGE,IAAMU,EAAS,CACbC,KAAM,uBACNC,KAAMlB,EAAqBC,EAAUC,GACrCiB,OAAQ,CAACb,IAJT,uBAOoBD,EAAce,MAAMJ,kBAApCK,GAEN,OAAOA,EAAQC,KAAK,eACbC,GACP,MAAMA,KAjBY,mCAsCYC,CAC1BZ,EACAX,EACAC,EACAI,kBAJImB,GAXP,OAoBKA,GAAiBA,EAAcC,cACjCC,OAAOC,oBAAoBrB,GAAUsB,QAAQ,SAACC,EAAOC,EAAKC,GACpDzB,EAASuB,IAAQnB,EAAYsB,KAAK1B,EAASuB,oBAI/CnB,EAAYuB,OAAS,EA1B1B,uBAmCyBtB,EAAYQ,MARd,CAClBH,kBAAmBX,EACnBY,KAAMO,EAAcC,aACpBP,OAAQR,mBAKJU,MACFA,aACK,CACLb,eAAgB,EAChBC,gBAAiB,KACjBC,KAAMW,EAAQC,uBAKfC,GACP,MAAMA,IA+eP,MAAO3B,GACR,OAAOmB,GAAU,EAAMnB,GAExB,OAAID,GAAUA,EAAOE,KACbF,EAAOE,KAAKkB,EAAUoB,KAAK,MAAM,GAAQpB,EAAUoB,KAAK,MAAM,IAE/DpB,GAAU,EAAOpB,wEAnfrB,GAAIkB,yBAAoBA,EAAauB,2HAtDnB"}